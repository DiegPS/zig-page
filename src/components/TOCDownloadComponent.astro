---
import { allReleases } from "../utils/releases-clean";
import { Tabs } from "@astrojs/starlight/components";
import MacosDownloadOption from "./MacosDownloadOption.astro";
import FreebsdDownloadOption from "./FreebsdDownloadOption.astro";
import LinuxDownloadOption from "./LinuxDownloadOption.astro";
import WindowsDownloadOption from "./WindowsDownloadOption.astro";
import SourceDownloadOption from "./SourceDownloadOption.astro";

const html = await Astro.slots.render("default");
const slot = html.match(/<h2 id="(.*)">/);
let slotValue: string | null = null;
if (slot) {
  slotValue = slot[1];
}
const release = [
  allReleases.find(({ version }: any) => {
    const versionWithoutDots = version.replaceAll(".", "");
    return versionWithoutDots === slotValue;
  }),
];
---

{
  release.map(
    ({
      version,
      information: {
        documentation,
        stdDocs,
        notes,
        source,
        windows,
        linux,
        macos,
        freebsd,
      },
    }: any) => {
      const versionWithoutDots = version.replaceAll(".", "");
      if (slotValue !== versionWithoutDots) {
        return;
      }

      return (
        <>
          {<slot />}
          <p>
            <strong>Documentation:</strong> {documentation}
          </p>
          {stdDocs && (
            <p>
              <strong>Standard Library Documentation:</strong> {stdDocs}
            </p>
          )}
          {notes && (
            <p>
              <strong>Release Notes:</strong> {notes}
            </p>
          )}
          <Tabs syncKey="os">
            <SourceDownloadOption source={source} />
            <WindowsDownloadOption windows={windows} />
            <LinuxDownloadOption linux={linux} />
            <MacosDownloadOption macos={macos} />
            <FreebsdDownloadOption freebsd={freebsd} />
          </Tabs>
        </>
      );
    },
  )
}
